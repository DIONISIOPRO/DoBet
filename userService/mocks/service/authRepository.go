// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github/namuethopro/dobet-user/domain"

	mock "github.com/stretchr/testify/mock"
)

// authRepository is an autogenerated mock type for the authRepository type
type authRepository struct {
	mock.Mock
}

// AddRefreshToken provides a mock function with given fields: refreshToken, userId
func (_m *authRepository) AddRefreshToken(refreshToken string, userId string) error {
	ret := _m.Called(refreshToken, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(refreshToken, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanUpDataBase provides a mock function with given fields:
func (_m *authRepository) CleanUpDataBase() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRefreshTokens provides a mock function with given fields: userId
func (_m *authRepository) GetRefreshTokens(userId string) ([]string, error) {
	ret := _m.Called(userId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: phone
func (_m *authRepository) Login(phone string) (domain.User, error) {
	ret := _m.Called(phone)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(phone)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeRefreshToken provides a mock function with given fields: userId
func (_m *authRepository) RevokeRefreshToken(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: user
func (_m *authRepository) SignUp(user domain.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
