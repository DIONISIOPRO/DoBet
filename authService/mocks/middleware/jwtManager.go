// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github/namuethopro/dobet-user/domain"

	mock "github.com/stretchr/testify/mock"
)

// jwtManager is an autogenerated mock type for the jwtManager type
type jwtManager struct {
	mock.Mock
}

// ExtractClaimsFromAcessToken provides a mock function with given fields: acessToken
func (_m *jwtManager) ExtractClaimsFromAcessToken(acessToken string) (domain.TokenClaims, error) {
	ret := _m.Called(acessToken)

	var r0 domain.TokenClaims
	if rf, ok := ret.Get(0).(func(string) domain.TokenClaims); ok {
		r0 = rf(acessToken)
	} else {
		r0 = ret.Get(0).(domain.TokenClaims)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(acessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAcessToken provides a mock function with given fields: user
func (_m *jwtManager) GenerateAcessToken(user domain.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRefreshToken provides a mock function with given fields: userid
func (_m *jwtManager) GenerateRefreshToken(userid string) (string, error) {
	ret := _m.Called(userid)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTokenExpired provides a mock function with given fields: incomingtoken
func (_m *jwtManager) IsTokenExpired(incomingtoken string) (bool, error) {
	ret := _m.Called(incomingtoken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(incomingtoken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(incomingtoken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: incomingtoken
func (_m *jwtManager) VerifyToken(incomingtoken string) bool {
	ret := _m.Called(incomingtoken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(incomingtoken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
