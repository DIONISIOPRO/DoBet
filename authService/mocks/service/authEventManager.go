// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github/namuethopro/dobet-auth/domain"

	amqp "github.com/streadway/amqp"

	mock "github.com/stretchr/testify/mock"
)

// authEventManager is an autogenerated mock type for the authEventManager type
type authEventManager struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: _a0
func (_m *authEventManager) AddUser(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQueues provides a mock function with given fields: _a0
func (_m *authEventManager) CreateQueues(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: name, event
func (_m *authEventManager) Publish(name string, event domain.Event) error {
	ret := _m.Called(name, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Event) error); ok {
		r0 = rf(name, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUser provides a mock function with given fields: _a0
func (_m *authEventManager) RemoveUser(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToQueue provides a mock function with given fields: name
func (_m *authEventManager) SubscribeToQueue(name string) (<-chan amqp.Delivery, error) {
	ret := _m.Called(name)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(string) <-chan amqp.Delivery); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: data
func (_m *authEventManager) UpdateUser(data []byte) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
